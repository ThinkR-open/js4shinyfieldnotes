[
["index.html", "JS 4 Shiny - Field Notes Field Notes on JavaScript for Shiny Users About this bookdown Installing {bubble}", " JS 4 Shiny - Field Notes Colin Fay 2019-11-29 Field Notes on JavaScript for Shiny Users About this bookdown This Bookdown is the content of an informal JavaScript training given inside ThinkR. It’s in no way supposed to be a complete JavaScript course nor even a complete book. Most of the content is composed of pieces of code + comments, without complete sentences. Please read it with this in mind. Also, this Bookdown is {shiny}-centric so focuse on things that can be used when building Shiny-apps. Installing {bubble} R package to interact with NodeJS Note: you’ll need to have NodeJS installed on your machine if (!requireNamespace(&quot;bubble&quot;)){ remotes::install_github(&quot;ColinFay/bubble&quot;) } Set the {knitr} engine for Rmds bubble::set_node_engine() Access a NodeJS REPL node_repl() "],
["intro.html", "Chapter 1 A quick Intro to Base objects 1.1 Launch a REPL 1.2 Assignment 1.3 Scalar objects 1.4 Array 1.5 Objects 1.6 Function 1.7 typeof", " Chapter 1 A quick Intro to Base objects 1.1 Launch a REPL For interactive usage library(bubble) node_repl() 1.2 Assignment Done with = var x = 12; 1.3 Scalar objects 1.3.1 Numbers var y = 17; x + y; # 29 1.3.2 Character var z = &quot;plop&quot;; # undefined All objects have methods that can be accessed with obj. z.toUpperCase(); # &#39;PLOP&#39; z.length; # 4 To know all the available methods var prot = Object.getPrototypeOf(z); Object.getOwnPropertyNames(prot); # undefined # [ &#39;length&#39;, # &#39;constructor&#39;, # &#39;anchor&#39;, # &#39;big&#39;, # &#39;blink&#39;, # &#39;bold&#39;, # &#39;charAt&#39;, # &#39;charCodeAt&#39;, # &#39;codePointAt&#39;, # &#39;concat&#39;, # &#39;endsWith&#39;, # &#39;fontcolor&#39;, # &#39;fontsize&#39;, # &#39;fixed&#39;, # &#39;includes&#39;, # &#39;indexOf&#39;, # &#39;italics&#39;, # &#39;lastIndexOf&#39;, # &#39;link&#39;, # &#39;localeCompare&#39;, # &#39;match&#39;, # &#39;normalize&#39;, # &#39;padEnd&#39;, # &#39;padStart&#39;, # &#39;repeat&#39;, # &#39;replace&#39;, # &#39;search&#39;, # &#39;slice&#39;, # &#39;small&#39;, # &#39;split&#39;, # &#39;strike&#39;, # &#39;sub&#39;, # &#39;substr&#39;, # &#39;substring&#39;, # &#39;sup&#39;, # &#39;startsWith&#39;, # &#39;toString&#39;, # &#39;trim&#39;, # &#39;trimLeft&#39;, # &#39;trimRight&#39;, # &#39;toLocaleLowerCase&#39;, # &#39;toLocaleUpperCase&#39;, # &#39;toLowerCase&#39;, # &#39;toUpperCase&#39;, # &#39;valueOf&#39;, # &#39;trimStart&#39;, # &#39;trimEnd&#39; ] 1.3.3 Boolean var a = true; # undefined if are written as in R console.log() prints to the console (useful for debugging) if (a) { console.log(&quot;yeay&quot;); } # yeay # undefined 1.3.4 Null &amp; undefined null is an empty, non existing value that has to be defined null # null undefined is a declared variable that has no value You’ll see undefined when doing assignment, it’s the return value of = var noval; # undefined noval; # undefined 1.4 Array They are R vectors Can’t be named Access by position Note: INDEX STARTS AT 0 1.4.1 Create Can be created empty var emptyarray = []; This type of creation is called “Literals” Can be created with values var x = [&quot;pouet&quot;, &quot;plop&quot;]; Can be created with the new function var g = new Array; # undefined g # [] var x = [&quot;pouet&quot;, &quot;plop&quot;]; x[0] = &quot;plop&quot; x # [ &#39;plop&#39;, &#39;plop&#39; ] 1.4.2 Select By position, (index start at 0) x[0] # &#39;plop&#39; Filter var poum = &quot;plop&quot;; x.filter(function(item){ return item === poum }); # undefined # undefined # [ &#39;plop&#39;, &#39;plop&#39; ] Anonymous functions can be used here (see below for more info) x.filter(item =&gt; item === poum); # [ &#39;plop&#39;, &#39;plop&#39; ] 1.4.3 Manipulate Iterate with forEach x.forEach(function(item, index) { console.log(index + &quot; : &quot; + item); }); # 0 : plop # 1 : plop # undefined with map x.map(z =&gt; z.toUpperCase()); # [ &#39;PLOP&#39;, &#39;PLOP&#39; ] Finding the first element var z = [1,2,3,4,5]; z.find(z =&gt; z &gt; 3); # undefined # 4 Test if every / some x.every(z =&gt; z === &quot;plop&quot;); # true x.some(z =&gt; z == &quot;plop&quot;); # true Add / Suppress At the end // Adds x.push(&quot;bim&quot;); x # [ &#39;plop&#39;, &#39;plop&#39;, &#39;bim&#39; ] // Removes x.pop(); x # [ &#39;plop&#39;, &#39;plop&#39; ] At start // Adds x.unshift(&quot;bim&quot;) x # [ &#39;bim&#39;, &#39;plop&#39;, &#39;plop&#39; ] // Removes x.shift() x # [ &#39;plop&#39;, &#39;plop&#39; ] By index x.push(&quot;bim&quot;) x.push(&quot;blam&quot;) x # [ &#39;plop&#39;, &#39;plop&#39;, &#39;bim&#39;, &#39;blam&#39; ] Takes 1 argument, starting at index 0 x.splice(0, 1) x # [ &#39;plop&#39;, &#39;bim&#39;, &#39;blam&#39; ] 1.4.4 Transform x.reverse(); # [ &#39;blam&#39;, &#39;bim&#39;, &#39;plop&#39; ] x.sort() # [ &#39;bim&#39;, &#39;blam&#39;, &#39;plop&#39; ] var y = [&quot;plaf&quot;, &quot;plouf&quot;] x.concat(y) # undefined # [ &#39;bim&#39;, &#39;blam&#39;, &#39;plop&#39;, &#39;plaf&#39;, &#39;plouf&#39; ] x.join() # &#39;bim,blam,plop&#39; var z = [1, 2, 3] z.toString() # undefined # &#39;1,2,3&#39; 1.5 Objects More or less like an R list Constructed with {} var obj = { a: 12, b: 17, c: [&quot;plaf&quot;, &quot;plouf&quot;], d: (x) =&gt; x.toUpperCase() } obj # undefined # { a: 12, b: 17, c: [ &#39;plaf&#39;, &#39;plouf&#39; ], d: [Function: d] } Access with .name obj.a; # 12 Internal methods can be used on internal objects obj.c.map(obj.d); # [ &#39;PLAF&#39;, &#39;PLOUF&#39; ] 1.6 Function Standard function add(x, y){ return x + y } # undefined add(11, 13) # 24 With the new constructor var add2 = new Function(&#39;a&#39;, &#39;b&#39;, &#39;return a + b&#39;); # undefined add2(11, 13) # 24 As an anonymous (or arrow) function var add3 = (a, b) =&gt; a + b # undefined add3(11, 13) # 24 1.7 typeof typeof a; typeof z; # &#39;boolean&#39; # &#39;object&#39; "],
["control.html", "Chapter 2 Control loops 2.1 For loop 2.2 While loop", " Chapter 2 Control loops 2.1 For loop for (statement 1; statement 2; statement 3) statement 1: init iteration variable statement 2: condition for code block execution statement 3: how to increment of the variable at each loop var plop = [&quot;bim&quot;, &quot;bam&quot;, &quot;boum&quot;] text = &quot;&quot;; for (i = 0; i &lt; plop.length; i++) { text += plop[i] + &quot;-&quot;; } # undefined # &#39;&#39; # &#39;bim-bam-boum-&#39; 2.2 While loop Just as in R, don’t forget to escape the loop var i = 4; while (i &lt; 8){ console.log(i * 5) i++ } # undefined # 20 # 25 # 30 # 35 # 7 i # 8 "],
["js-in-shiny.html", "Chapter 3 JS in Shiny 3.1 Add JS to Shiny 3.2 The JavaScript Shiny Object 3.3 Shiny JS Handlers", " Chapter 3 JS in Shiny 3.1 Add JS to Shiny How to add JavaScript to {shiny}? 3.1.1 With {golem} golem::add_js_file() Simple JS file golem::add_js_handler() Shiny Handlers 3.1.2 Link in your app 3.1.2.1 With tags$script If you have a file: tags$script(src = &quot;www/script.js&quot;) Write the JS code straight in the app: tags$script( HTML(&quot;var x = [&#39;plop&#39;, &#39;pouet&#39;]; x.forEach(x =&gt; alert(x)) &quot;) ) 3.1.2.2 With htmlDependency() Create an htmlDependency object: dep_binding &lt;- function() { htmlDependency( &quot;dep&quot;,&quot;0.1.0&quot;, src = system.file(&quot;app/www&quot;, package = &quot;expl&quot;), stylesheet = c( &quot;css/uikit.css&quot;, &quot;css/custom.css&quot; ), script = c( &quot;input-fleche.js&quot;, &quot;input-nav.js&quot;, &quot;input-progress.js&quot;, &quot;input-rangeSlider.js&quot;, &quot;input-select.js&quot;, &quot;input-onoff.js&quot;, &quot;input-sqonOff.js&quot;, &quot;input-radioButton.js&quot;, &quot;input-checkbox.js&quot;, &quot;input-increment.js&quot;, &quot;panel.js&quot; ), meta = list( lang=&quot;fr&quot; ), head = HTML( &#39;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content==&quot;IE=edge&quot;/&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;link href=&quot;https://fonts.googleapis.com/css?family=Raleway:400,600,700|Roboto+Slab:300,400,700&quot; rel=&quot;stylesheet&quot;&gt; &#39; ) ) } Then in R/app_ui.R golem_add_external_resources &lt;- function(){ #... dr_binding() } 3.2 The JavaScript Shiny Object In the browser, there is a Shiny JavaScript object. 3.2.1 Set the value of an input from JavaScript From your browser, you can set the value of a Shiny input: Shiny.setInputValue(id, value, options) With {priority : 'event'}, the value is sent even if the value hasn’t changed (not the default behavior) Shiny.setInputValue(&quot;pouet&quot;, 12, {priority : &#39;event&#39;}) pouet will appear as input$pouet observeEvent( input$pouet , { }) 3.3 Shiny JS Handlers Pass data from R to JS (from server to browser) Shiny.addCustomMessageHandler(&#39;alert&#39;, function(arg) { alert(arg.val); alert(arg.size); }); Send with session$sendCustomMessage() To pass multiple value, pass a list, then access with .name session$sendCustomMessage(&quot;alert&quot;, list( val = 2, size = 11 )) "],
["dom-dom-events.html", "Chapter 4 DOM &amp; DOM Events 4.1 DOM elements 4.2 DOM elements 4.3 DOM events 4.4 Add Event Listeners 4.5 Example in Shiny", " Chapter 4 DOM &amp; DOM Events 4.1 DOM elements A webpage is a DOM (Document Object Model) Nodes of a tree where the document is the root Contain parents and children Nodes contain attributes 4.2 DOM elements 4.2.1 Query elements In Vanilla JS &lt;div id = &quot;pouet&quot; name=&quot;plop&quot; class = &quot;plouf&quot;&gt;Wesh&lt;/div&gt; document.querySelector(&quot;#pouet&quot;) // With the ID document.querySelectorAll(&quot;.plouf&quot;) // With the class document.getElementById(&quot;pouet&quot;) // With the ID document.getElementsByName(&quot;plop&quot;) // With the name attribute document.getElementsByClassName(&quot;plouf&quot;) // With the class document.getElementsByTagName(&quot;div&quot;) // With the tag 4.3 DOM events DOM events are generated by the user interacting with the web page, or programmatically (i.e by JavaScript). 4.3.1 Browser Events click / dblclick focus keypress, keydown, keyup mousedown, mouseenter, mouseleave, mousemove, mouseout, mouseover, mouseup scroll https://developer.mozilla.org/fr/docs/Web/Events 4.3.2 Shiny events Shiny comes with a series of events. $(document).on(&#39;shiny:connected&#39;, function(event) { alert(&#39;Connected to the server&#39;); }); Name Event.Properties Cancelable Target shiny:connected socket No document shiny:disconnected socket No document shiny:sessioninitialized NA No document shiny:busy NA No document shiny:idle NA No document shiny:inputchanged name, value, inputType, binding, el Yes input element shiny:message message Yes document shiny:conditional NA No document shiny:bound binding, bindingType No input/output element shiny:unbound binding, bindingType No input/output element shiny:value name, value, binding Yes output element shiny:error name, error, binding Yes output element shiny:outputinvalidated name, binding No output element shiny:recalculating NA No output element shiny:recalculated NA No output element shiny:visualchange visible, binding No output element shiny:updateinput message, binding Yes input element shiny:filedownload name, href No download button/link 4.4 Add Event Listeners 4.4.1 Inside tags &lt;input type=&quot;text&quot; onKeyPress = &quot;alert(&#39;plop&#39;)&quot;&gt; 4.4.2 With JS &lt;input type=&quot;text&quot; id = &quot;plop&quot;&gt; &lt;script&gt; document.getElementById(&quot;plop&quot;).addEventListener(&quot;keypress&quot;, function(){ alert(&quot;pouet&quot;) }) &lt;/script&gt; 4.5 Example in Shiny library(shiny) library(magrittr) ui &lt;- function(request){ tagList( textInput( &quot;txt&quot;, &quot;Enter txt&quot; ) %&gt;% tagAppendAttributes( onKeyPress = sprintf( &quot;Shiny.setInputValue(&#39;%s_keypress&#39;, event.key)&quot;, &quot;txt&quot; ) ) ) } server &lt;- function(input, output, session){ observeEvent( input$txt_keypress , { print(input$txt_keypress) if (input$txt_keypress == &quot;Enter&quot;){ print(&quot;VALIDATED&quot;) } }) } shinyApp(ui, server) Same, but doing all in JavaScript library(shiny) library(magrittr) ui &lt;- function(request){ tagList( textInput( &quot;txt&quot;, &quot;Enter txt&quot; ), tags$script(&#39; document.getElementById(&quot;txt&quot;).addEventListener(&quot;keypress&quot;, function(event){ Shiny.setInputValue(&quot;txt_keypress&quot;, event.key, {priority : &quot;event&quot;}) }) &#39;) ) } server &lt;- function(input, output, session){ observeEvent( input$txt_keypress , { print(input$txt_keypress) if (input$txt_keypress == &quot;Enter&quot;){ print(&quot;VALIDATED&quot;) } }) } shinyApp(ui, server) "],
["jquery.html", "Chapter 5 jQuery 5.1 About 5.2 Selection 5.3 Event", " Chapter 5 jQuery 5.1 About jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. Natively in Shiny 5.2 Selection Classic // ID $(&quot;#plop&quot;) // Class $(&quot;.plop&quot;) Filter $(&quot;button:contains(&#39;this&#39;)&quot;) $(&quot;a[href = &#39;https://thinkr.fr&#39;]&quot;) $( &quot;td:eq( 2 )&quot; ) // element at index $( &quot;li:nth-child(2)&quot; ) $( &quot;input:checked&quot; ) &lt;div id = &#39;pouet&#39; name = &#39;bing&#39; class = &#39;blob&#39; value = &#39;1&#39; data-this = &#39;12&#39;&gt;Oï&lt;/div&gt; get var x = $(&quot;#pouet&quot;) x.attr(&quot;id&quot;) x.attr(&quot;value&quot;) // character x.data(&quot;this&quot;) // Number x.outerHeight() set x.attr(&quot;id&quot;, &quot;bibi&quot;) x.attr(&quot;value&quot;, parseInt(x.attr(&quot;value&quot;)) + 1 ) // Adding 1 to value 5.3 Event 5.3.1 Add event var x = $(&quot;#pouet&quot;); x.on(&quot;click&quot;, function(){ $(this).attr(&quot;value&quot;, parseInt($(this).attr(&quot;value&quot;)) + 1 ) }) 5.3.2 Shiny Example library(shiny) library(magrittr) ui &lt;- function(request){ tagList( textInput( &quot;txt&quot;, &quot;Enter txt&quot; ), tags$script(&#39; document.getElementById(&quot;txt&quot;).addEventListener(&quot;keypress&quot;, function(event){ Shiny.setInputValue(&quot;txt_keypress&quot;, event.key, {priority : &quot;event&quot;}) }) &#39;) ) } server &lt;- function(input, output, session){ observeEvent( input$txt_keypress , { print(input$txt_keypress) if (input$txt_keypress == &quot;Enter&quot;){ print(&quot;VALIDATED&quot;) } }) } shinyApp(ui, server) # # Listening on http://127.0.0.1:3681 "],
["this-and-attributes.html", "Chapter 6 This and attributes 6.1 What is this? 6.2 Attributes 6.3 Example in Shiny", " Chapter 6 This and attributes 6.1 What is this? Context from where the function is called. var plop = { a: 12, set_a: function(val){ this.a = val; }, get_a: function(){ return this.a; } } plop.set_a(18) plop.get_a() # undefined # undefined # 18 &lt;button name = &quot;plop&quot; onclick=&quot;alert(this.name)&quot;&gt;Click me&lt;/button&gt; Click me 6.2 Attributes Attributes are “data” contained in the HTML node 6.2.1 On button &lt;button name = &quot;plop&quot; onclick=&quot;alert(this.name)&quot;&gt;Click me&lt;/button&gt; Click me &lt;img src = &quot;img/this.jpeg&quot; name = &quot;plop&quot; onclick=&quot;alert(this.name)&quot;&gt;&lt;/img&gt; 6.3 Example in Shiny Create alert on button click library(shiny) ui &lt;- function(request){ tagList( tableOutput(&quot;tbl&quot;) ) } server &lt;- function(input, output, session){ output$tbl &lt;- renderTable({ data.frame( x = letters[1:5], y = sprintf( &quot;&lt;button name = &#39;%s&#39; onclick=&#39;alert(this.name)&#39;&gt;Click me&lt;/button&gt;&quot;, letters[1:5] ) ) }, sanitize.text.function = identity) } shinyApp(ui, server) Create button inside a table and send the value back to Shiny library(shiny) ui &lt;- function(request){ tagList( tableOutput(&quot;tbl&quot;), tags$script(&#39; function give(arg){ Shiny.setInputValue(&quot;last_clicked&quot;, arg.name, {priority : &quot;event&quot;}) } &#39;) ) } server &lt;- function(input, output, session){ output$tbl &lt;- renderTable({ data.frame( x = letters[1:5], y = sprintf( &quot;&lt;button name = &#39;%s&#39; onclick=&#39;give(this)&#39;&gt;Click me&lt;/button&gt;&quot;, letters[1:5] ) ) }, sanitize.text.function = identity) observeEvent( input$last_clicked , { print(input$last_clicked) }) } shinyApp(ui, server) Onclick event on plot to get the custom name of the plot library(shiny) ui &lt;- function(request){ tagList( plotOutput(&quot;plot&quot;) %&gt;% tagAppendAttributes( hey = &quot;plop&quot;, onclick = &quot;alert(this.getAttribute(&#39;hey&#39;))&quot; ) ) } server &lt;- function(input, output, session){ output$plot &lt;- renderPlot({ plot(iris) }) } shinyApp(ui, server) "],
["custom-inputs-binding.html", "Chapter 7 Custom Inputs Binding 7.1 Example: Meter binding 7.2 Random Button 7.3 Switch", " Chapter 7 Custom Inputs Binding Shiny allows to extend its inputs with new input bindings. To do that, you’ll need: A custom binding defined in JS A custom input in HTML (can be done with R) 7.1 Example: Meter binding www/binding.js // Define an event on click $(document).on(&quot;click&quot;, &quot;.meter&quot;, function(evt) { var el = $(evt.target); // Change the value when clicked el.text(parseInt(el.text()) + 1); el.attr(&quot;value&quot;, parseInt(el.attr(&quot;value&quot;)) + 1); // Trigger an event el.trigger(&quot;fire&quot;); }); // Create a new InputBinding object var meter = new Shiny.InputBinding(); // Extend this object with methods $.extend(meter, { // How to find the object find: function(scope) { return $(scope).find(&quot;.meter&quot;); }, // How to get the value from the objet getValue: function(el) { return parseInt($(el).attr(&quot;value&quot;)); }, // Used to retrieve the ID of the object // STANDARD getId: function(el) { return el.id; }, // Used to change the value when update for example setValue: function(el, value) { $(el).text(value); $(el).attr(&quot;value&quot;, value); }, // Register the event, and validate callback subscribe: function(el, callback) { $(el).on(&quot;fire.meter&quot;, function(e) { callback(); }); }, // To remove the binding unsubscribe: function(el) { $(el).off(&quot;.meter&quot;); }, // What to do when you use // session$sendCustomMessage() receiveMessage: function(el, data) { this.setValue(el, data.value); $(el).trigger(&#39;fire&#39;); } }); // Register this object as a Shiny Input Shiny.inputBindings.register(meter); In Shiny library(shiny) meter &lt;- function( inputId, value = 2 ) { tagList( singleton( tags$head( tags$script( src = &quot;www/binding.js&quot; ) ) ), tags$meter( id = inputId, value = as.character(value), min=&quot;0&quot;, max=&quot;10&quot;, class = &quot;meter&quot;, as.character(value) ) ) } update_meter &lt;- function( session, inputId, value ){ session$sendInputMessage(inputId, list(value = value)) } ui &lt;- function(){ addResourcePath(&quot;www&quot;, &quot;www&quot;) fluidPage( meter(&quot;plop&quot;), actionButton(&quot;go&quot;,&quot;Restore&quot;) ) } server &lt;- function(input, output, session) { observeEvent(input$plop, { print(input$plop) }) observeEvent( input$go , { update_meter(session, &quot;plop&quot;, 0) }) } shinyApp(ui = ui, server = server) 7.2 Random Button www/binding.js $(document).on(&quot;click&quot;, &quot;.ranbutt&quot;, function(evt) { // define what happens on click var el = $(evt.target); el.data(&quot;value&quot;, Math.random()); el.text(el.data(&quot;value&quot;)): // Needed to trigger the callback el.trigger(&quot;go&quot;); }); var ranbutt = new Shiny.InputBinding(); $.extend(ranbutt, { find: function(scope) { return $(scope).find(&quot;.ranbutt&quot;); }, getValue: function(el) { return($(el).data(&quot;value&quot;)); }, getId: function(el) { return el.id; }, setValue: function(el, value) { $(el).data(&quot;value&quot;, Math.random()) $(el).text(el.data(&quot;value&quot;)) }, subscribe: function(el, callback) { $(el).on(&quot;go.ranbutt&quot;, function(e) { callback(); }); }, unsubscribe: function(el) { $(el).off(&quot;.ranbutt&quot;); }, receiveMessage: function(el, data) { this.setValue(el, data.value); $(el).trigger(&#39;go&#39;); } }); Shiny.inputBindings.register(ranbutt); app.R ui &lt;- function(){ addResourcePath(&quot;www&quot;, &quot;www&quot;) fluidPage( singleton( tags$head( tags$script( src = &quot;www/binding.js&quot; ) ) ), tags$button( class = &quot;ranbutt&quot;, `data-value` = 1, id = &quot;plop&quot;, &quot;1&quot; ) ) } server &lt;- function(input, output, session) { observeEvent(input$plop, { print(input$plop) }) } shinyApp(ui = ui, server = server) 7.3 Switch www/binding.js $(document).on(&quot;click&quot;, &quot;.switch-toggle-switch&quot;, function(evt) { var el = $(evt.target); var val = parseInt(el.data(&quot;value&quot;)) if (val == 1){ el.data(&quot;value&quot;, 0); } if (val === 0){ el.data(&quot;value&quot;, 1); } el.trigger(&quot;change&quot;); }); var onoffBinding = new Shiny.InputBinding(); $.extend(onoffBinding, { find: function(scope) { return $(scope).find(&quot;.switch-toggle-switch&quot;); }, getValue: function(el) { return parseInt($(el).data(&quot;value&quot;)); }, setValue: function(el, value) { $(el).value(value); }, subscribe: function(el, callback) { $(el).on(&quot;change.onoffBinding&quot;, function(e) { callback(); }); }, unsubscribe: function(el) { $(el).off(&quot;.onoffBinding&quot;); } }); Shiny.inputBindings.register(onoffBinding); In Shiny tags$div( id = inputId, `data-value` = 0, class=&quot;switch-toggle-switch&quot;, style = &quot;pointer-events: all&quot; ) "],
["examples.html", "Chapter 8 Examples 8.1 ColinFay/tidytuesday201942 8.2 Toast 8.3 Prompt sthg 8.4 Fixed nav 8.5 Get the width of an element from R 8.6 Get number of click 8.7 Add a message to a menu element 8.8 Hide and sho specific elements 8.9 Success alert 8.10 Adapt size of div to screen", " Chapter 8 Examples 8.1 ColinFay/tidytuesday201942 On load, this allows to hide all the contents (with the class row) and to show only the first. The first nav-link is set to active. $(function(){ $( &quot;.row&quot; ).hide(); $( &quot;.row&quot; ).first().show(); $( &quot;.nav-link&quot; ).first().addClass(&quot;active&quot;); var h = parseInt($(&#39;nav&#39;).outerHeight()) + 30; $(&quot;.row&quot;).css(&quot;padding-top&quot;, h + &quot;px&quot;); }) 8.2 Toast Using Boostrap 4 toast &lt;div id = &quot;globalerror&quot; class=&quot;toast global-toast&quot; data-delay = &quot;5000&quot;&gt; &lt;div class=&quot;toast-body&quot;&gt; &lt;span&gt;&amp;#10060;&lt;/span&gt; &lt;span&gt; Application error&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; Shiny.addCustomMessageHandler(&#39;errortoast&#39;, function(id) { $(&quot;#globalerror&quot;).toast(&quot;show&quot;) }); Shiny.addCustomMessageHandler(&#39;successtoast&#39;, function(id) { $(&quot;#globalsuccess&quot;).toast(&quot;show&quot;) }); error_toast &lt;- function(){ golem::invoke_js(&quot;errortoast&quot;, TRUE) NULL } 8.3 Prompt sthg This function will open a prompt, ask something to the user, and send it back to R on the input$idout function prompt_name(idout){ var nom = prompt(&quot;Enter a name for your blabla&quot;); if (nom === null) { return; } Shiny.setInputValue(idout, nom, {priority: &#39;event&#39;}); } tags$button( class = &quot;btn btn-default action-button&quot;, &quot;Save blabla&quot;, onclick = sprintf( &quot;prompt_name(&#39;%s&#39;)&quot;, save_id ) ) 8.4 Fixed nav This makes a navbar follow the scroll of the page document.addEventListener(&#39;scroll&#39;, function (event) { var yoff = window.pageYOffset; var h = parseInt($(&#39;nav&#39;).outerHeight()); $(&quot;.fixed-nav&quot;).css(&quot;top&quot;, (h - yoff) + &quot;px&quot;); }, true); 8.5 Get the width of an element from R Ask for the width of a div: Shiny.addCustomMessageHandler(&quot;getwidth&quot;, function(what) { var w = document.getElementById(what).clientWidth; Shiny.setInputValue(&#39;divheight&#39;, w); }); Then use this width to render the plot: session$sendCustomMessage(&quot;getwidth&quot;, ns(&quot;biggy&quot;)) # ... plotOutput( ns(&quot;gg_waffer&quot;), width = as.character(round(input$biggy * 0.7)) ) 8.6 Get number of click var add_val_and_send = function(e, id, nom){ com = &quot;&quot;; $(e).data(&#39;value&#39;, $(e).data(&#39;value&#39;) + 1 ); Shiny.setInputValue(id, {com : nom, val : $(e).data(&#39;value&#39;)}, {priority : &quot;event&quot;}); } li_custom_context( ns(&quot;ligne&quot;), &quot;La ligne&quot;, `data-value` = 10, sprintf( &quot;add_val_and_send(this, &#39;%s&#39;, &#39;%s&#39;)&quot;, ns(&quot;ligne&quot;), nom ) ) 8.7 Add a message to a menu element When the user clicks on the tab, they’ll get asked if they confirm that they want to restart the app $(function(){ var x = $(&#39;a[href=&quot;#shiny-tab-demarrage&quot;]&#39;); x.attr(&quot;href&quot;, &quot;javascript:void(0)&quot;); x.attr(&quot;onclick&quot;, &quot;var x = confirm( &#39;Do you want to restart the app?&#39; ); if(x){ window.location = window.location };&quot;); }) 8.8 Hide and sho specific elements $( document ).ready(function() { Shiny.addCustomMessageHandler(&#39;show_year&#39;, function(arg) { $(&quot;#single &gt; div.col-sm-3.well &gt; div:nth-child(5)&quot;).hide() $(&quot;#single &gt; div.col-sm-3.well &gt; div:nth-child(7)&quot;).hide() $(&quot;#single &gt; div.col-sm-3.well &gt; div:nth-child(3)&quot;).show() }) Shiny.addCustomMessageHandler(&#39;show_artist&#39;, function(arg) { $(&quot;#single &gt; div.col-sm-3.well &gt; div:nth-child(3)&quot;).hide() $(&quot;#single &gt; div.col-sm-3.well &gt; div:nth-child(7)&quot;).hide() $(&quot;#single &gt; div.col-sm-3.well &gt; div:nth-child(5)&quot;).show() }) Shiny.addCustomMessageHandler(&#39;show_label&#39;, function(arg) { $(&quot;#single &gt; div.col-sm-3.well &gt; div:nth-child(3)&quot;).hide() $(&quot;#single &gt; div.col-sm-3.well &gt; div:nth-child(5)&quot;).hide() $(&quot;#single &gt; div.col-sm-3.well &gt; div:nth-child(7)&quot;).show() }) }); 8.9 Success alert tags$div( class=&quot;alert alert-success&quot;, id = &quot;alert-success&quot;, tags$a( class=&quot;close&quot;, &quot;X&quot; ), &quot;Success!&quot; ) $( document ).ready(function() { Shiny.addCustomMessageHandler(&#39;success&#39;, function(content) { $(&quot;#alert-success&quot;).show(); }); }); 8.10 Adapt size of div to screen // https://stackoverflow.com/questions/1038727/how-to-get-browser-width-using-javascript-code function getWidth() { if (self.innerWidth) { return self.innerWidth; } if (document.documentElement &amp;&amp; document.documentElement.clientWidth) { return document.documentElement.clientWidth; } if (document.body) { return document.body.clientWidth; } } function makelarge(){ var arr_width = $(&quot;.arrow&quot;).innerWidth() * 2 + 64 * 2; $(&quot;.tabrow&quot;).not(&quot;.inner&quot;).css(&quot;width&quot;, (getWidth() - arr_width) + &quot;px&quot;); } window.onresize = makelarge "],
["read-more.html", "Chapter 9 Read More 9.1 Shiny &amp; JS 9.2 JS", " Chapter 9 Read More 9.1 Shiny &amp; JS Building Big Shiny Apps - A Workflow - Chapter 19 Using JavaScript Build custom input objects Packaging JavaScript code for Shiny Communicating with Shiny via JavaScript 9.2 JS 9.2.1 JavaScript basics Mozilla JavaScript w3schools JavaScript Free Code Camp JavaScript For Cats Learn JS 9.2.2 jQuery jQuery Learning Center w3schools jQuery 9.2.3 Intermediate / advanced JavaScript Eloquent JavaScript You Don’t Know JS Yet "]
]
